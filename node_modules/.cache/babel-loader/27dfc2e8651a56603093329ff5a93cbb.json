{"remainingRequest":"C:\\Users\\user\\Desktop\\vue\\site\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\user\\Desktop\\vue\\site\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\user\\Desktop\\vue\\site\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\user\\Desktop\\vue\\site\\node_modules\\fish-ui\\src\\components\\Upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\user\\Desktop\\vue\\site\\node_modules\\fish-ui\\src\\components\\Upload.vue","mtime":499162500000},{"path":"C:\\Users\\user\\Desktop\\vue\\site\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\user\\Desktop\\vue\\site\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\user\\Desktop\\vue\\site\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\user\\Desktop\\vue\\site\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BsaWNlIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3RvciI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaCI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBhamF4IGZyb20gJy4vYWpheC5qcyc7CmltcG9ydCBmaXNoTW9kYWwgZnJvbSAnLi9Nb2RhbC52dWUnOwppbXBvcnQgeyBub3RpZnkgfSBmcm9tICcuLi9jb25maWcnOwpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgZmlzaE1vZGFsOiBmaXNoTW9kYWwKICB9LAogIG5hbWU6ICdmaXNoLXVwbG9hZCcsCiAgcHJvcHM6IHsKICAgIHZhbHVlOiB7CiAgICAgIHR5cGU6IEFycmF5CiAgICB9LAogICAgLy8gW3tuYW1lOiAnJywgdXJsOiAnJywgc3RhdGU6ICcnXV0KICAgIHR5cGU6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnbGlzdCcKICAgIH0sCiAgICAvLyBwaWN0dXJlCiAgICBhY3Rpb246IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIG11bHRpcGxlOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgYWNjZXB0OiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgZGVmYXVsdDogJyovKicKICAgIH0sCiAgICBtYXhTaXplOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogNSAqIDEwMjQgKiAxMDI0CiAgICB9LAogICAgd2l0aENyZWRlbnRpYWxzOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgLy8gaHR0cCAuLgogICAgcHJldmlldzogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIGhlYWRlcnM6IHsKICAgICAgdHlwZTogT2JqZWN0CiAgICB9LAogICAgLy8gaHR0cCBoZWFkZXJzCiAgICBkYXRhOiB7CiAgICAgIHR5cGU6IE9iamVjdAogICAgfSwKICAgIC8vIGh0dHAgZGF0YQogICAgbmFtZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdmaWxlJwogICAgfSwKICAgIG9uU3RhcnQ6IHsKICAgICAgdHlwZTogRnVuY3Rpb24sCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KGZpbGUpIHt9CiAgICB9LAogICAgb25Qcm9ncmVzczogewogICAgICB0eXBlOiBGdW5jdGlvbiwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7fQogICAgfSwKICAgIG9uU3VjY2VzczogewogICAgICB0eXBlOiBGdW5jdGlvbiwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7fQogICAgfSwKICAgIG9uRXJyb3I6IHsKICAgICAgdHlwZTogRnVuY3Rpb24sCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge30KICAgIH0sCiAgICBmb3JtYXRVcmxGcm9tUmVzcG9uc2U6IHsKICAgICAgdHlwZTogRnVuY3Rpb24sCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KHJlcykgewogICAgICAgIHJldHVybiByZXM7CiAgICAgIH0KICAgIH0KICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBwcmV2aWV3U2hvdzogZmFsc2UsCiAgICAgIHByZXZpZXdVcmw6ICcnLAogICAgICByZXFzOiB7fSwKICAgICAgdXBsb2FkaW5nRmlsZXM6IFtdIC8vIOmAieaLqeS4iuS8oOeahOaWh+S7tuWIl+ihqAoKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgYWxsRmlsZXM6IGZ1bmN0aW9uIGFsbEZpbGVzKCkgewogICAgICBpZiAodGhpcy50eXBlID09PSAncGljdHVyZScpIHsKICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnZhbHVlKS5jb25jYXQodGhpcy51cGxvYWRpbmdGaWxlcyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMudXBsb2FkaW5nRmlsZXMpLmNvbmNhdCh0aGlzLnZhbHVlKTsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIHJlbW92ZUZpbGU6IGZ1bmN0aW9uIHJlbW92ZUZpbGUoaW5kZXgpIHsKICAgICAgaWYgKHRoaXMudXBsb2FkaW5nRmlsZXMubGVuZ3RoID4gMCkgewogICAgICAgIHRoaXMuYWJvcnQodGhpcy51cGxvYWRpbmdGaWxlc1tpbmRleF0sIGluZGV4KTsKICAgICAgICB0aGlzLnVwbG9hZGluZ0ZpbGVzLnNwbGljZShpbmRleCwgMSk7CiAgICAgIH0KCiAgICAgIHRoaXMuZW1pdENoYW5nZSh0aGlzLnZhbHVlLmZpbHRlcihmdW5jdGlvbiAoZiwgaSkgewogICAgICAgIHJldHVybiBpICE9PSBpbmRleDsKICAgICAgfSkpOwogICAgfSwKICAgIGNsaWNrSGFuZGxlcjogZnVuY3Rpb24gY2xpY2tIYW5kbGVyKCkgewogICAgICB0aGlzLiRyZWZzLmlucHV0LmNsaWNrKCk7CiAgICB9LAogICAgcHJldmlld0hhbmRsZXI6IGZ1bmN0aW9uIHByZXZpZXdIYW5kbGVyKGZpbGUpIHsKICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ3BpY3R1cmUnICYmIHRoaXMucHJldmlldykgewogICAgICAgIHRoaXMucHJldmlld1VybCA9IGZpbGUudXJsOwogICAgICAgIHRoaXMucHJldmlld1Nob3cgPSB0cnVlOwogICAgICB9CiAgICB9LAogICAgY2hhbmdlSGFuZGxlcjogZnVuY3Rpb24gY2hhbmdlSGFuZGxlcihldnQpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIGlmICh0aGlzLnJlcXMubGVuZ3RoID4gMCkgcmV0dXJuOwogICAgICB2YXIgZmlsZXMgPSBldnQudGFyZ2V0LmZpbGVzOyAvLyBjb25zb2xlLmxvZygnZmlsZXM6JywgZXZ0LnRhcmdldC5maWxlcykKCiAgICAgIGlmICghZmlsZXMpIHJldHVybjsKICAgICAgZmlsZXMgPSBBcnJheS5mcm9tKGZpbGVzKTsKICAgICAgaWYgKCF0aGlzLm11bHRpcGxlKSBmaWxlcyA9IFtmaWxlc1swXV07CiAgICAgIGlmIChmaWxlcy5sZW5ndGggPD0gMCkgcmV0dXJuOwogICAgICB0aGlzLnVwbG9hZGluZ0ZpbGVzID0gZmlsZXM7CiAgICAgIGZpbGVzLmZvckVhY2goZnVuY3Rpb24gKGZpbGUpIHsKICAgICAgICBmaWxlLnN0YXRlID0gJ3Byb2dyZXNzJzsKICAgICAgfSk7CiAgICAgIGZpbGVzLmZvckVhY2goZnVuY3Rpb24gKGZpbGUsIGluZGV4KSB7CiAgICAgICAgX3RoaXMudXBsb2FkKGZpbGUsIGluZGV4KTsKICAgICAgfSk7CiAgICB9LAogICAgdXBsb2FkOiBmdW5jdGlvbiB1cGxvYWQoZmlsZSwgaW5kZXgpIHsKICAgICAgdGhpcy4kcmVmcy5pbnB1dC52YWx1ZSA9IG51bGw7CiAgICAgIHRoaXMucG9zdChmaWxlLCBpbmRleCk7CiAgICB9LAogICAgYWJvcnQ6IGZ1bmN0aW9uIGFib3J0KGZpbGUsIGlkKSB7CiAgICAgIGlmICh0aGlzLnJlcXNbaWRdKSB7CiAgICAgICAgdGhpcy5yZXFzW2lkXS5hYm9ydCgpOwogICAgICB9CiAgICB9LAogICAgcG9zdDogZnVuY3Rpb24gcG9zdChmaWxlLCBpZCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHByZXZpZXdGaWxlKGZpbGUsIGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgICAgICBmaWxlLl91cmwgPSByZXN1bHQ7CiAgICAgIH0pOyAvLyBjb25zb2xlLmxvZygnZmlsZS5fdXJsJywgZmlsZSkKCiAgICAgIHZhciBvcHRpb25zID0gewogICAgICAgIGhlYWRlcnM6IHRoaXMuaGVhZGVycywKICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHRoaXMud2l0aENyZWRlbnRpYWxzLAogICAgICAgIGZpbGU6IGZpbGUsCiAgICAgICAgZGF0YTogdGhpcy5kYXRhLAogICAgICAgIGZpbGVuYW1lOiB0aGlzLm5hbWUsCiAgICAgICAgYWN0aW9uOiB0aGlzLmFjdGlvbiwKICAgICAgICBvblByb2dyZXNzOiBmdW5jdGlvbiBvblByb2dyZXNzKGUpIHsKICAgICAgICAgIGZpbGUucGVyY2VudCA9IHBhcnNlSW50KGUucGVyY2VudCk7CgogICAgICAgICAgX3RoaXMyLnVwbG9hZGluZ0ZpbGVzLnNwbGljZShpZCwgMSwgZmlsZSk7CgogICAgICAgICAgX3RoaXMyLm9uUHJvZ3Jlc3MoZSwgZmlsZSk7CiAgICAgICAgfSwKICAgICAgICBvblN1Y2Nlc3M6IGZ1bmN0aW9uIG9uU3VjY2VzcyhyZXMpIHsKICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHJlcykKICAgICAgICAgIGRlbGV0ZSBfdGhpczIucmVxc1tpZF07CiAgICAgICAgICBmaWxlLnN0YXRlID0gJ2RvbmUnOwogICAgICAgICAgZmlsZS51cmwgPSBfdGhpczIuZm9ybWF0VXJsRnJvbVJlc3BvbnNlKHJlcyk7CgogICAgICAgICAgX3RoaXMyLnVwbG9hZGluZ0ZpbGVzLnNwbGljZShpZCwgMSwgZmlsZSk7CgogICAgICAgICAgX3RoaXMyLm9uU3VjY2VzcyhyZXMsIGZpbGUpOwoKICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhfdGhpczIucmVxcykubGVuZ3RoIDw9IDAgJiYgX3RoaXMyLnZhbHVlKSB7CiAgICAgICAgICAgIHZhciBuVmFsdWUgPSBBcnJheS5mcm9tKF90aGlzMi52YWx1ZSk7CgogICAgICAgICAgICBfdGhpczIudXBsb2FkaW5nRmlsZXMuZm9yRWFjaChmdW5jdGlvbiAoZikgewogICAgICAgICAgICAgIGlmIChmLnN0YXRlID09PSAnZG9uZScpIHsKICAgICAgICAgICAgICAgIG5WYWx1ZS5wdXNoKHsKICAgICAgICAgICAgICAgICAgbmFtZTogZi5uYW1lLAogICAgICAgICAgICAgICAgICB1cmw6IGYudXJsLAogICAgICAgICAgICAgICAgICBfdXJsOiBmLl91cmwKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjb25zb2xlLmxvZyhuVmFsdWUpOwogICAgICAgICAgICBfdGhpczIudXBsb2FkaW5nRmlsZXMgPSBbXTsKCiAgICAgICAgICAgIF90aGlzMi5lbWl0Q2hhbmdlKG5WYWx1ZSk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBvbkVycm9yOiBmdW5jdGlvbiBvbkVycm9yKGVyciwgcmVzKSB7CiAgICAgICAgICBmaWxlLnN0YXRlID0gJ2Vycm9yJzsKCiAgICAgICAgICBfdGhpczIudXBsb2FkaW5nRmlsZXMuc3BsaWNlKGlkLCAxLCBmaWxlKTsKCiAgICAgICAgICBfdGhpczIub25FcnJvcihlcnIsIHJlcywgZmlsZSk7CgogICAgICAgICAgZGVsZXRlIF90aGlzMi5yZXFzW2lkXTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIHRoaXMub25TdGFydChmaWxlKTsKICAgICAgdmFyIHJlcSA9IGFqYXgob3B0aW9ucyk7CiAgICAgIHRoaXMucmVxc1tpZF0gPSByZXE7CgogICAgICBpZiAocmVxICYmIHJlcS50aGVuKSB7CiAgICAgICAgcmVxLnRoZW4ob3B0aW9ucy5vblN1Y2Nlc3MsIG9wdGlvbnMub25FcnJvcik7CiAgICAgIH0KICAgIH0sCiAgICBlbWl0Q2hhbmdlOiBmdW5jdGlvbiBlbWl0Q2hhbmdlKHYpIHsKICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnLCB2KTsKICAgICAgbm90aWZ5LmZpZWxkLmNoYW5nZSh0aGlzKTsKICAgIH0KICB9Cn07Cgp2YXIgcHJldmlld0ZpbGUgPSBmdW5jdGlvbiBwcmV2aWV3RmlsZShmaWxlLCBjYWxsYmFjaykgewogIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpOwoKICByZWFkZXIub25sb2FkZW5kID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGNhbGxiYWNrKHJlYWRlci5yZXN1bHQpOwogIH07CgogIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpOwp9Ow=="},{"version":3,"sources":["Upload.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div :class=\"['fish upload', type]\">\n      <div class=\"upload-select\" @click=\"clickHandler\" v-if=\"type === 'list' || type == ''\">\n        <input type=\"file\" ref=\"input\"\n               @change=\"changeHandler\"\n               :multiple=\"multiple\"\n               :accept=\"accept\"/>\n        <slot></slot>\n      </div>\n      <ul>\n        <li v-for=\"(file, index) in allFiles\" :class=\"[file.state || 'done', `percent-${file.percent}`]\" :key=\"index\">\n          <template v-if=\"type === 'picture'\">\n            <img :src=\"file._url || file.url\" v-if=\"type === 'picture' && file.state !== 'progress'\"/>\n            <div class=\"info\" @click=\"previewHandler(file)\">\n              <i @click.stop=\"removeFile(index)\">&times;</i>\n            </div>\n          </template>\n          <template v-else>\n            {{ file.name }}\n            <i class=\"close\" @click.stop=\"removeFile(index)\">&times;</i>\n          </template>\n        </li>\n      </ul>\n      <div class=\"upload-select\" @click=\"clickHandler\" v-if=\"type === 'picture'\">\n        <input type=\"file\" ref=\"input\"\n               @change=\"changeHandler\"\n               :multiple=\"multiple\"\n               :accept=\"accept\"/>\n        <i>+</i>\n        <slot></slot>\n      </div>\n      <fish-modal :visible.sync=\"previewShow\" title=\"Image Preview\">\n        <div class=\"image\"><img :src=\"previewUrl\" style=\"width: 100%;\"/></div>\n      </fish-modal>\n    </div>\n  </div>\n</template>\n<script>\n  import ajax from './ajax.js'\n  import fishModal from './Modal.vue'\n  import { notify } from '../config'\n\n  export default {\n    components: {fishModal},\n    name: 'fish-upload',\n    props: {\n      value: { type: Array }, // [{name: '', url: '', state: '']]\n      type: { type: String, default: 'list' }, // picture\n      action: { type: String, required: true },\n      multiple: { type: Boolean, default: false },\n      accept: { type: String, default: '*/*' },\n      maxSize: { type: Number, default: 5 * 1024 * 1024 },\n      withCredentials: { type: Boolean, default: false }, // http ..\n      preview: { type: Boolean, default: false },\n      headers: { type: Object }, // http headers\n      data: { type: Object }, // http data\n      name: { type: String, default: 'file' },\n      onStart: { type: Function, default: (file) => {} },\n      onProgress: { type: Function, default: () => {} },\n      onSuccess: { type: Function, default: () => {} },\n      onError: { type: Function, default: () => {} },\n      formatUrlFromResponse: { type: Function, default: (res) => res }\n    },\n    data () {\n      return {\n        previewShow: false,\n        previewUrl: '',\n        reqs: {},\n        uploadingFiles: [] // 选择上传的文件列表\n      }\n    },\n    computed: {\n      allFiles () {\n        if (this.type === 'picture') {\n          return Array.from(this.value).concat(this.uploadingFiles)\n        }\n        return Array.from(this.uploadingFiles).concat(this.value)\n      }\n    },\n    methods: {\n      removeFile (index) {\n        if (this.uploadingFiles.length > 0) {\n          this.abort(this.uploadingFiles[index], index)\n          this.uploadingFiles.splice(index, 1)\n        }\n        this.emitChange(this.value.filter((f, i) => i !== index))\n      },\n      clickHandler () {\n        this.$refs.input.click()\n      },\n      previewHandler (file) {\n        if (this.type === 'picture' && this.preview) {\n          this.previewUrl = file.url\n          this.previewShow = true\n        }\n      },\n      changeHandler (evt) {\n        if (this.reqs.length > 0) return\n        let files = evt.target.files\n        // console.log('files:', evt.target.files)\n        if (!files) return\n        files = Array.from(files)\n        if (!this.multiple) files = [files[0]]\n        if (files.length <= 0) return\n\n        this.uploadingFiles = files\n        files.forEach((file) => { file.state = 'progress' })\n        files.forEach((file, index) => {\n          this.upload(file, index)\n        })\n      },\n      upload (file, index) {\n        this.$refs.input.value = null\n        this.post(file, index)\n      },\n      abort (file, id) {\n        if (this.reqs[id]) {\n          this.reqs[id].abort()\n        }\n      },\n      post (file, id) {\n        previewFile(file, (result) => { file._url = result })\n        // console.log('file._url', file)\n        const options = {\n          headers: this.headers,\n          withCredentials: this.withCredentials,\n          file: file,\n          data: this.data,\n          filename: this.name,\n          action: this.action,\n          onProgress: e => {\n            file.percent = parseInt(e.percent)\n            this.uploadingFiles.splice(id, 1, file)\n            this.onProgress(e, file)\n          },\n          onSuccess: res => {\n            // console.log(res)\n            delete this.reqs[id]\n            file.state = 'done'\n            file.url = this.formatUrlFromResponse(res)\n            this.uploadingFiles.splice(id, 1, file)\n            this.onSuccess(res, file)\n            if (Object.keys(this.reqs).length <= 0 && this.value) {\n              let nValue = Array.from(this.value)\n              this.uploadingFiles.forEach((f) => {\n                if (f.state === 'done') {\n                  nValue.push({name: f.name, url: f.url, _url: f._url})\n                }\n              })\n              console.log(nValue)\n              this.uploadingFiles = []\n              this.emitChange(nValue)\n            }\n          },\n          onError: (err, res) => {\n            file.state = 'error'\n            this.uploadingFiles.splice(id, 1, file)\n            this.onError(err, res, file)\n            delete this.reqs[id]\n          }\n        }\n\n        this.onStart(file)\n        const req = ajax(options)\n        this.reqs[id] = req\n        if (req && req.then) {\n          req.then(options.onSuccess, options.onError)\n        }\n      },\n      emitChange (v) {\n        this.$emit('input', v)\n        notify.field.change(this)\n      }\n    }\n  }\n\n  const previewFile = (file, callback) => {\n    const reader = new FileReader()\n    reader.onloadend = () => callback(reader.result)\n    reader.readAsDataURL(file)\n  }\n</script>\n"],"sourceRoot":"node_modules/fish-ui/src/components"}]}